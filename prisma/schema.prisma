// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Team {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teamLead  User     @relation(fields: [teamLeadId], references: [id])

  lastSlackDate      String
  slackDaysOfWeek    String   @default("1,3") // Days separated by spaces
  slackHour          Int      @default(15)    // UTC hours
  slackMessageConfig String   @default("{}")  // JSON

  teamLeadId       String
  TeamMember       TeamMember[]
  AuthToken        AuthToken[]
  GithubRepository GithubRepository[]

  jiraStoryPointsFieldName String @default("Story Points")

  @@index([name])
}

model TeamMember {
  id             Int      @id @default(autoincrement())
  githubUserName String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  team   Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId Int

  @@index([githubUserName])
}

model GithubRepository {
  id        Int      @id @default(autoincrement())
  path      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  team   Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId Int

  @@index([path])
}

// Multiple teams could read the same repo path,
// so let's not directly link it to GithubRepository
// (Assuming we never support self-hosted github)
model Cache {
  path             String   @id
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  cache            String
  lastFetchStarted DateTime @default(now())

  @@index([path])
}

model AuthToken {
  id        Int      @id @default(autoincrement())
  name      String
  type      String   @default("github")
  value     String
  updatedAt DateTime @updatedAt

  team   Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId Int

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  githubUserName String?
  accounts       Account[]
  sessions       Session[]
  Team           Team[]
  isSuperUser    Boolean   @default(false)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
